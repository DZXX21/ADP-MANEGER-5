<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lapsus - Dijital VarlÄ±k Arama Sistemi</title>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #000000 0%, #0d1421 25%, #1a2332 50%, #0a1628 75%, #000511 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, rgba(5, 15, 25, 0.9), rgba(10, 22, 40, 0.8));
            backdrop-filter: blur(15px);
            border-bottom: 1px solid rgba(30, 144, 255, 0.3);
            padding: 1rem 2rem;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 4px 20px rgba(30, 144, 255, 0.15);
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e90ff;
            text-shadow: 0 0 20px rgba(30, 144, 255, 0.6);
        }

        .nav-menu {
            display: flex;
            gap: 2rem;
            align-items: center;
        }

        .nav-link {
            color: #6495ed;
            text-decoration: none;
            font-weight: 500;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .nav-link:hover {
            background: linear-gradient(135deg, rgba(30, 144, 255, 0.2), rgba(0, 100, 255, 0.15));
            color: #1e90ff;
        }

        .nav-link.active {
            background: linear-gradient(135deg, rgba(30, 144, 255, 0.25), rgba(0, 100, 255, 0.2));
            color: #1e90ff;
        }

        /* Main Content */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Search Section */
        .search-section {
            text-align: center;
            margin-bottom: 3rem;
        }

        .search-title {
            font-size: 2.5rem;
            font-weight: 700;
            background: linear-gradient(135deg, #1e90ff, #87ceeb, #4682b4);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
            text-shadow: 0 0 30px rgba(30, 144, 255, 0.3);
        }

        .search-subtitle {
            color: #6495ed;
            font-size: 1.125rem;
            margin-bottom: 2rem;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Search Form */
        .search-form {
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            backdrop-filter: blur(15px);
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 1rem;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 8px 25px rgba(30, 144, 255, 0.2);
        }

        .search-input-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .search-input {
            width: 100%;
            padding: 1rem 3rem 1rem 1rem;
            background: rgba(15, 30, 50, 0.8);
            border: 2px solid rgba(30, 144, 255, 0.3);
            border-radius: 0.75rem;
            color: #ffffff;
            font-size: 1.125rem;
            font-weight: 500;
            transition: all 0.3s ease;
            outline: none;
        }

        .search-input:focus {
            border-color: #1e90ff;
            box-shadow: 0 0 20px rgba(30, 144, 255, 0.4);
            transform: scale(1.02);
        }

        .search-input::placeholder {
            color: #6495ed;
        }

        .search-button {
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #1e90ff, #4682b4);
            border: none;
            border-radius: 0.5rem;
            padding: 0.75rem;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .search-button:hover {
            background: linear-gradient(135deg, #4682b4, #1e90ff);
            transform: translateY(-50%) scale(1.1);
            box-shadow: 0 8px 20px rgba(30, 144, 255, 0.4);
        }

        /* Advanced Filters */
        .filters-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-label {
            color: #87ceeb;
            font-weight: 500;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .filter-select, .filter-input {
            padding: 0.75rem;
            background: rgba(15, 30, 50, 0.8);
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 0.5rem;
            color: #ffffff;
            font-size: 0.875rem;
            transition: all 0.2s ease;
            outline: none;
        }

        .filter-select:focus, .filter-input:focus {
            border-color: #1e90ff;
            box-shadow: 0 0 10px rgba(30, 144, 255, 0.3);
        }

        .filter-select option {
            background: #0a1628;
            color: #ffffff;
        }

        /* Search Results */
        .results-section {
            margin-top: 2rem;
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            border-radius: 0.75rem;
            border: 1px solid rgba(30, 144, 255, 0.3);
        }

        .results-info {
            color: #87ceeb;
            font-weight: 500;
        }

        .results-stats {
            display: flex;
            gap: 1rem;
            font-size: 0.875rem;
            color: #6495ed;
        }

        .result-card {
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            backdrop-filter: blur(15px);
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 1rem;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(30, 144, 255, 0.1);
        }

        .result-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #1e90ff, #87ceeb, #4682b4);
        }

        .result-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(30, 144, 255, 0.2);
            border-color: rgba(30, 144, 255, 0.5);
        }

        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .result-domain {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1e90ff;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .result-tags {
            display: flex;
            gap: 0.5rem;
        }

        .tag {
            padding: 0.25rem 0.75rem;
            background: rgba(30, 144, 255, 0.2);
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 1rem;
            font-size: 0.75rem;
            color: #87ceeb;
            font-weight: 500;
        }

        .result-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .detail-label {
            color: #6495ed;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 500;
        }

        .detail-value {
            color: #f1f5f9;
            font-weight: 500;
            word-break: break-all;
        }

        .detail-value.password {
            font-family: monospace;
            background: rgba(30, 144, 255, 0.1);
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            border: 1px solid rgba(30, 144, 255, 0.2);
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 2rem;
        }

        .pagination-button {
            padding: 0.75rem 1rem;
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 0.5rem;
            color: #6495ed;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .pagination-button:hover {
            background: linear-gradient(135deg, rgba(30, 144, 255, 0.2), rgba(0, 100, 255, 0.15));
            color: #1e90ff;
            transform: translateY(-1px);
        }

        .pagination-button.active {
            background: linear-gradient(135deg, #1e90ff, #4682b4);
            color: white;
        }

        .pagination-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 3rem;
            color: #6495ed;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(30, 144, 255, 0.3);
            border-top: 3px solid #1e90ff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* No Results */
        .no-results {
            text-align: center;
            padding: 3rem;
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            border-radius: 1rem;
            border: 1px solid rgba(30, 144, 255, 0.3);
        }

        .no-results-icon {
            width: 64px;
            height: 64px;
            margin: 0 auto 1rem;
            color: #6495ed;
        }

        .no-results h3 {
            color: #87ceeb;
            margin-bottom: 0.5rem;
        }

        .no-results p {
            color: #6495ed;
        }

        /* Error State */
        .error-message {
            background: linear-gradient(145deg, rgba(220, 38, 38, 0.2), rgba(153, 27, 27, 0.15));
            border: 1px solid rgba(220, 38, 38, 0.3);
            border-radius: 0.75rem;
            padding: 1rem;
            margin-bottom: 1rem;
            color: #fca5a5;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }

            .nav-menu {
                flex-wrap: wrap;
                justify-content: center;
            }

            .main-content {
                padding: 1rem;
            }

            .search-title {
                font-size: 2rem;
            }

            .search-form {
                padding: 1.5rem;
            }

            .filters-container {
                grid-template-columns: 1fr;
            }

            .results-header {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .result-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .result-details {
                grid-template-columns: 1fr;
            }

            .pagination {
                flex-wrap: wrap;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }

        /* Copy Button */
        .copy-button {
            background: rgba(30, 144, 255, 0.2);
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 0.25rem;
            color: #1e90ff;
            cursor: pointer;
            padding: 0.25rem;
            margin-left: 0.5rem;
            transition: all 0.2s ease;
            font-size: 0.75rem;
        }

        .copy-button:hover {
            background: rgba(30, 144, 255, 0.3);
            transform: scale(1.1);
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: linear-gradient(145deg, rgba(10, 22, 40, 0.7), rgba(25, 25, 112, 0.5));
            border: 1px solid rgba(30, 144, 255, 0.3);
            border-radius: 0.75rem;
            padding: 1rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(30, 144, 255, 0.2);
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e90ff;
        }

        .stat-label {
            color: #6495ed;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="logo">
                <i data-lucide="shield-check"></i>
                Lapsus
            </div>
            <nav class="nav-menu">
                <a href="/" class="nav-link">
                    <i data-lucide="layout-dashboard"></i>
                    Kontrol Paneli
                </a>
                <a href="/search" class="nav-link active">
                    <i data-lucide="search"></i>
                    Arama
                </a>
                <a href="/analytics" class="nav-link">
                    <i data-lucide="bar-chart-3"></i>
                    Analitik
                </a>
                <a href="/accounts" class="nav-link">
                    <i data-lucide="users"></i>
                    Dijital VarlÄ±klar
                </a>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Search Section -->
        <section class="search-section fade-in">
            <h1 class="search-title">Dijital VarlÄ±k Arama</h1>
            <p class="search-subtitle">GeliÅmiÅ filtreleme ve arama Ã¶zellikleri ile dijital varlÄ±klarÄ±nÄ±zÄ± hÄ±zlÄ±ca bulun</p>
        </section>

        <!-- Search Form -->
        <form class="search-form fade-in" id="searchForm">
            <div class="search-input-container">
                <input 
                    type="text" 
                    class="search-input" 
                    id="searchInput"
                    placeholder="Domain, kullanÄ±cÄ± adÄ± veya region arayÄ±n... (Ã¶rn: gmail.com, yahoo, gov.tr)"
                    autocomplete="off"
                >
                <button type="submit" class="search-button" id="searchButton">
                    <i data-lucide="search"></i>
                </button>
            </div>

            <!-- Advanced Filters -->
            <div class="filters-container">
                <div class="filter-group">
                    <label class="filter-label">Domain Kategorisi</label>
                    <select class="filter-select" id="domainFilter">
                        <option value="">TÃ¼m Kategoriler</option>
                        <option value="gmail">Gmail</option>
                        <option value="yahoo">Yahoo</option>
                        <option value="hotmail">Hotmail/Outlook</option>
                        <option value="gov">Kamu KurumlarÄ±</option>
                        <option value="edu">EÄitim KurumlarÄ±</option>
                        <option value="bank">Finansal KuruluÅlar</option>
                        <option value="social">Sosyal Medya</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label class="filter-label">Region</label>
                    <select class="filter-select" id="regionFilter">
                        <option value="">TÃ¼m Regionlar</option>
                        <option value="TR">TÃ¼rkiye</option>
                        <option value="US">Amerika</option>
                        <option value="EU">Avrupa</option>
                        <option value="AS">Asya</option>
                        <option value="RU">Rusya</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label class="filter-label">Kaynak</label>
                    <select class="filter-select" id="sourceFilter">
                        <option value="">TÃ¼m Kaynaklar</option>
                        <option value="TXT">Text DosyasÄ±</option>
                        <option value="API">API Import</option>
                        <option value="MANUAL">Manuel Ekleme</option>
                        <option value="BULK">Toplu Ä°Ã§e AktarÄ±m</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label class="filter-label">Sayfa BaÅÄ±na</label>
                    <select class="filter-select" id="limitFilter">
                        <option value="10">10 SonuÃ§</option>
                        <option value="20" selected>20 SonuÃ§</option>
                        <option value="50">50 SonuÃ§</option>
                        <option value="100">100 SonuÃ§</option>
                    </select>
                </div>
            </div>
        </form>

        <!-- Search Results -->
        <section class="results-section" id="resultsSection" style="display: none;">
            <!-- Results Header -->
            <div class="results-header" id="resultsHeader">
                <div class="results-info">
                    <span id="searchQuery"></span> iÃ§in <strong id="totalResults">0</strong> sonuÃ§ bulundu
                </div>
                <div class="results-stats">
                    <span><i data-lucide="clock"></i> <span id="searchTime">0</span>ms</span>
                    <span><i data-lucide="eye"></i> Sayfa <span id="currentPage">1</span></span>
                </div>
            </div>

            <!-- Search Statistics -->
            <div class="stats-grid" id="searchStats" style="display: none;">
                <div class="stat-card">
                    <div class="stat-value" id="exactMatches">0</div>
                    <div class="stat-label">Tam EÅleÅme</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="partialMatches">0</div>
                    <div class="stat-label">KÄ±smi EÅleÅme</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="uniqueDomains">0</div>
                    <div class="stat-label">Benzersiz Domain</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="avgResponseTime">0</div>
                    <div class="stat-label">YanÄ±t SÃ¼resi (ms)</div>
                </div>
            </div>

            <!-- Results Container -->
            <div id="resultsContainer"></div>

            <!-- Pagination -->
            <div class="pagination" id="pagination" style="display: none;"></div>
        </section>

        <!-- Loading State -->
        <div class="loading" id="loadingState" style="display: none;">
            <div class="loading-spinner"></div>
            <p>Dijital varlÄ±klar aranÄ±yor...</p>
        </div>

        <!-- No Results -->
        <div class="no-results" id="noResults" style="display: none;">
            <i data-lucide="search-x" class="no-results-icon"></i>
            <h3>SonuÃ§ BulunamadÄ±</h3>
            <p>Arama kriterlerinizi deÄiÅtirerek tekrar deneyin</p>
        </div>

        <!-- Error Message -->
        <div class="error-message" id="errorMessage" style="display: none;">
            <i data-lucide="alert-circle"></i>
            <span id="errorText">Bir hata oluÅtu</span>
        </div>
    </main>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Global variables
        let currentPage = 1;
        let totalPages = 1;
        let currentQuery = '';
        let searchTimeout;

        // API Configuration
        const API_BASE = 'http://192.168.70.71:5000';
        const API_KEY = 'demo_key_123'; // Bu gerÃ§ek uygulamada gÃ¼venli Åekilde saklanmalÄ±

        // DOM Elements
        const searchForm = document.getElementById('searchForm');
        const searchInput = document.getElementById('searchInput');
        const searchButton = document.getElementById('searchButton');
        const resultsSection = document.getElementById('resultsSection');
        const resultsContainer = document.getElementById('resultsContainer');
        const loadingState = document.getElementById('loadingState');
        const noResults = document.getElementById('noResults');
        const errorMessage = document.getElementById('errorMessage');
        const pagination = document.getElementById('pagination');

        // Search function
        async function performSearch(query, page = 1, filters = {}) {
            if (!query || query.length < 2) {
                showError('Arama sorgusu en az 2 karakter olmalÄ±dÄ±r');
                return;
            }

            showLoading(true);
            hideError();
            
            try {
                const params = new URLSearchParams({
                    q: query,
                    page: page,
                    limit: filters.limit || 20,
                    api_key: API_KEY
                });

                // Add filters to params
                if (filters.domain) params.append('domain', filters.domain);
                if (filters.region) params.append('region', filters.region);
                if (filters.source) params.append('source', filters.source);

                const startTime = performance.now();
                const response = await fetch(`${API_BASE}/api/search?${params}`);
                const endTime = performance.now();
                const responseTime = Math.round(endTime - startTime);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();
                
                if (data.success) {
                    displayResults(data, query, responseTime);
                    updateStats(data);
                    updatePagination(data.pagination);
                } else {
                    throw new Error(data.message || 'Arama baÅarÄ±sÄ±z');
                }

            } catch (error) {
                console.error('Search error:', error);
                showError(`Arama hatasÄ±: ${error.message}`);
            } finally {
                showLoading(false);
            }
        }

        // Display search results
        function displayResults(data, query, responseTime) {
            const { results, pagination, summary } = data;
            
            // Update results header
            document.getElementById('searchQuery').textContent = `"${query}"`;
            document.getElementById('totalResults').textContent = pagination.total.toLocaleString();
            document.getElementById('searchTime').textContent = responseTime;
            document.getElementById('currentPage').textContent = pagination.page;

            // Show/hide sections
            resultsSection.style.display = 'block';
            noResults.style.display = 'none';

            if (results.length === 0) {
                resultsContainer.innerHTML = '';
                noResults.style.display = 'block';
                return;
            }

            // Render results
            resultsContainer.innerHTML = results.map((result, index) => `
                <div class="result-card fade-in" style="animation-delay: ${index * 0.1}s;">
                    <div class="result-header">
                        <div class="result-domain">
                            <i data-lucide="globe"></i>
                            ${result.domain}
                        </div>
                        <div class="result-tags">
                            <span class="tag">${result.region || 'Unknown'}</span>
                            <span class="tag">${result.source || 'TXT'}</span>
                            ${result.spid ? `<span class="tag">SPID: ${result.spid}</span>` : ''}
                        </div>
                    </div>
                    <div class="result-details">
                        <div class="detail-item">
                            <span class="detail-label">KullanÄ±cÄ± AdÄ±</span>
                            <span class="detail-value">
                                ${result.username}
                                <button class="copy-button" onclick="copyToClipboard('${result.username}')">
                                    <i data-lucide="copy"></i>
                                </button>
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Åifre</span>
                            <span class="detail-value password">
                                ${result.password}
                                <button class="copy-button" onclick="copyToClipboard('${result.password}')">
                                    <i data-lucide="copy"></i>
                                </button>
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Domain</span>
                            <span class="detail-value">
                                ${result.domain}
                                <button class="copy-button" onclick="copyToClipboard('${result.domain}')">
                                    <i data-lucide="copy"></i>
                                </button>
                            </span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Eklenme Tarihi</span>
                            <span class="detail-value">${formatDate(result.date)}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">ID</span>
                            <span class="detail-value">#${result.id}</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Tam Bilgi</span>
                            <span class="detail-value">
                                ${result.username}:${result.password}
                                <button class="copy-button" onclick="copyToClipboard('${result.username}:${result.password}')">
                                    <i data-lucide="copy"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            `).join('');

            // Reinitialize Lucide icons for new content
            lucide.createIcons();
        }

        // Update search statistics
        function updateStats(data) {
            const statsGrid = document.getElementById('searchStats');
            if (data.summary) {
                document.getElementById('exactMatches').textContent = data.summary.exact_matches || 0;
                document.getElementById('partialMatches').textContent = data.summary.partial_matches || 0;
                
                // Calculate unique domains from results
                const uniqueDomains = new Set(data.results.map(r => r.domain)).size;
                document.getElementById('uniqueDomains').textContent = uniqueDomains;
                
                statsGrid.style.display = 'grid';
            }
        }

        // Update pagination
        function updatePagination(paginationData) {
            const { page, pages, has_next, has_prev, total } = paginationData;
            currentPage = page;
            totalPages = pages;

            if (pages <= 1) {
                pagination.style.display = 'none';
                return;
            }

            pagination.style.display = 'flex';
            
            let paginationHTML = '';

            // Previous button
            if (has_prev) {
                paginationHTML += `
                    <button class="pagination-button" onclick="goToPage(${page - 1})">
                        <i data-lucide="chevron-left"></i>
                        Ãnceki
                    </button>
                `;
            }

            // Page numbers
            const startPage = Math.max(1, page - 2);
            const endPage = Math.min(pages, page + 2);

            if (startPage > 1) {
                paginationHTML += `<button class="pagination-button" onclick="goToPage(1)">1</button>`;
                if (startPage > 2) {
                    paginationHTML += `<span class="pagination-button" style="border: none; background: none;">...</span>`;
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                paginationHTML += `
                    <button class="pagination-button ${i === page ? 'active' : ''}" onclick="goToPage(${i})">
                        ${i}
                    </button>
                `;
            }

            if (endPage < pages) {
                if (endPage < pages - 1) {
                    paginationHTML += `<span class="pagination-button" style="border: none; background: none;">...</span>`;
                }
                paginationHTML += `<button class="pagination-button" onclick="goToPage(${pages})">${pages}</button>`;
            }

            // Next button
            if (has_next) {
                paginationHTML += `
                    <button class="pagination-button" onclick="goToPage(${page + 1})">
                        Sonraki
                        <i data-lucide="chevron-right"></i>
                    </button>
                `;
            }

            pagination.innerHTML = paginationHTML;
            lucide.createIcons();
        }

        // Go to specific page
        function goToPage(page) {
            if (page < 1 || page > totalPages || page === currentPage) return;
            
            const filters = getCurrentFilters();
            performSearch(currentQuery, page, filters);
            
            // Scroll to top of results
            resultsSection.scrollIntoView({ behavior: 'smooth' });
        }

        // Get current filter values
        function getCurrentFilters() {
            return {
                domain: document.getElementById('domainFilter').value,
                region: document.getElementById('regionFilter').value,
                source: document.getElementById('sourceFilter').value,
                limit: document.getElementById('limitFilter').value
            };
        }

        // Copy to clipboard function
        async function copyToClipboard(text) {
            try {
                await navigator.clipboard.writeText(text);
                
                // Show success feedback
                showToast('Panoya kopyalandÄ±!', 'success');
            } catch (err) {
                console.error('Copy failed:', err);
                
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = text;
                textArea.style.position = 'fixed';
                textArea.style.opacity = '0';
                document.body.appendChild(textArea);
                textArea.select();
                
                try {
                    document.execCommand('copy');
                    showToast('Panoya kopyalandÄ±!', 'success');
                } catch (err) {
                    showToast('Kopyalama baÅarÄ±sÄ±z', 'error');
                }
                
                document.body.removeChild(textArea);
            }
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                background: ${type === 'success' ? 'linear-gradient(135deg, rgba(34, 197, 94, 0.9), rgba(21, 128, 61, 0.9))' : 'linear-gradient(135deg, rgba(239, 68, 68, 0.9), rgba(185, 28, 28, 0.9))'};
                color: white;
                border-radius: 0.5rem;
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
                z-index: 10000;
                font-weight: 500;
                display: flex;
                align-items: center;
                gap: 0.5rem;
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
            
            toast.innerHTML = `
                <i data-lucide="${type === 'success' ? 'check-circle' : 'alert-circle'}"></i>
                ${message}
            `;
            
            document.body.appendChild(toast);
            lucide.createIcons();
            
            // Animate in
            setTimeout(() => {
                toast.style.transform = 'translateX(0)';
            }, 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Format date
        function formatDate(dateString) {
            if (!dateString) return 'Bilinmiyor';
            
            const date = new Date(dateString);
            return date.toLocaleString('tr-TR', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // Show loading state
        function showLoading(show) {
            loadingState.style.display = show ? 'block' : 'none';
            searchButton.disabled = show;
            
            if (show) {
                searchButton.innerHTML = '<i data-lucide="loader"></i>';
                resultsSection.style.display = 'none';
                noResults.style.display = 'none';
            } else {
                searchButton.innerHTML = '<i data-lucide="search"></i>';
            }
            
            lucide.createIcons();
        }

        // Show error message
        function showError(message) {
            document.getElementById('errorText').textContent = message;
            errorMessage.style.display = 'flex';
            setTimeout(() => {
                errorMessage.style.display = 'none';
            }, 5000);
        }

        // Hide error message
        function hideError() {
            errorMessage.style.display = 'none';
        }

        // Real-time search suggestions (debounced)
        function handleSearchInput() {
            clearTimeout(searchTimeout);
            const query = searchInput.value.trim();
            
            if (query.length >= 2) {
                searchTimeout = setTimeout(() => {
                    // Optional: Show search suggestions here
                    console.log('Search suggestions for:', query);
                }, 500);
            }
        }

        // Event Listeners
        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const query = searchInput.value.trim();
            if (query) {
                currentQuery = query;
                currentPage = 1;
                const filters = getCurrentFilters();
                performSearch(query, 1, filters);
            }
        });

        searchInput.addEventListener('input', handleSearchInput);

        // Filter change handlers
        ['domainFilter', 'regionFilter', 'sourceFilter', 'limitFilter'].forEach(filterId => {
            document.getElementById(filterId).addEventListener('change', () => {
                if (currentQuery) {
                    const filters = getCurrentFilters();
                    performSearch(currentQuery, 1, filters);
                }
            });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K to focus search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                searchInput.focus();
            }
            
            // Escape to clear search
            if (e.key === 'Escape' && document.activeElement === searchInput) {
                searchInput.value = '';
                resultsSection.style.display = 'none';
                noResults.style.display = 'none';
            }
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', () => {
            // Focus search input
            searchInput.focus();
            
            // Check for URL parameters (for direct links)
            const urlParams = new URLSearchParams(window.location.search);
            const urlQuery = urlParams.get('q');
            if (urlQuery) {
                searchInput.value = urlQuery;
                currentQuery = urlQuery;
                const filters = getCurrentFilters();
                performSearch(urlQuery, 1, filters);
            }
            
            // Add some sample searches for demo
            addQuickSearchButtons();
        });

        // Add quick search buttons
        function addQuickSearchButtons() {
            const quickSearches = [
                { label: 'Gmail HesaplarÄ±', query: 'gmail.com' },
                { label: 'Kamu KurumlarÄ±', query: 'gov.tr' },
                { label: 'Ãniversiteler', query: 'edu.tr' },
                { label: 'Yahoo HesaplarÄ±', query: 'yahoo' },
                { label: 'TÃ¼rk BankalarÄ±', query: 'bank' }
            ];

            const quickSearchContainer = document.createElement('div');
            quickSearchContainer.style.cssText = `
                display: flex;
                gap: 0.5rem;
                flex-wrap: wrap;
                justify-content: center;
                margin-top: 1rem;
            `;

            quickSearches.forEach(search => {
                const button = document.createElement('button');
                button.type = 'button';
                button.className = 'pagination-button';
                button.style.cssText = `
                    font-size: 0.875rem;
                    padding: 0.5rem 1rem;
                `;
                button.innerHTML = `<i data-lucide="zap"></i> ${search.label}`;
                button.onclick = () => {
                    searchInput.value = search.query;
                    currentQuery = search.query;
                    const filters = getCurrentFilters();
                    performSearch(search.query, 1, filters);
                };
                quickSearchContainer.appendChild(button);
            });

            document.querySelector('.search-form').appendChild(quickSearchContainer);
            lucide.createIcons();
        }

        // Performance monitoring
        function trackPerformance(action, startTime) {
            const endTime = performance.now();
            const duration = endTime - startTime;
            
            console.log(`Performance: ${action} took ${duration.toFixed(2)}ms`);
            
            // Update average response time stat
            document.getElementById('avgResponseTime').textContent = Math.round(duration);
        }

        // Error reporting (could be sent to analytics service)
        function reportError(error, context) {
            console.error('Error Report:', {
                message: error.message,
                stack: error.stack,
                context: context,
                timestamp: new Date().toISOString(),
                userAgent: navigator.userAgent,
                url: window.location.href
            });
        }

        // Add CSS for toast notifications
        const toastStyles = document.createElement('style');
        toastStyles.textContent = `
            .toast {
                animation: slideIn 0.3s ease;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(toastStyles);
    </script>
</body>
</html>